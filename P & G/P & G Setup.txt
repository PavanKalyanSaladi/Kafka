  +
java : 11
kafka : kafka 3.6.1


STEP 1: GO TO ROOT DIRECTORY AND GET IP ADDRESS

[tekcrux@localhost ~]$ su
Password:
[root@localhost tekcrux]# cd
[root@localhost ~]#
[root@localhost ~]# ifconfig

STEP 2 : GIVE IP ADDRES AND FQDN IN /etc/hosts 

[root@localhost ~]# vi /etc/hosts
[root@localhost ~]#
[root@localhost ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.0.101 server1.kafka.com

STEP 3 : DISABLE SELINUX

[root@localhost ~]# vi /etc/selinux/config
[root@server1 ~]# cat /etc/selinux/config

# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=disabled
# SELINUXTYPE= can take one of three two values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected.
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted

STEP 4 : STOP FIREWALL

[root@localhost ~]# systemctl stop firewalld
[root@localhost ~]# systemctl disable firewalld
Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.
Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.
[root@localhost ~]# systemctl status  firewalld
● firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor >
   Active: inactive (dead)
     Docs: man:firewalld(1)

NOTE: IF THE HOSTNAME IS NOT CHANGED AFTER REBOOT, RUN THIS COMMAND TO SET REQUIRED HOSTNAME 
               -  hostnamectl set-hostname server1.kafka.com

STEP 5: RESTART THE SERVER
[root@localhost ~]# init 6

STEP 6: INSTALL JAVA

[root@localhost ~]# java -version
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-b12)
OpenJDK 64-Bit Server VM (build 25.131-b12, mixed mode)

[root@localhost ~]# yum -y install java-11-openjdk-devel

[root@localhost ~]# update-alternatives --config java

There are 2 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
*+ 1           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.131-11.b12.el7.x86_64/jre/bin/java)
   2           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.23.0.9-2.el7_9.x86_64/bin/java)

Enter to keep the current selection[+], or type selection number: 2
[root@localhost ~]# java -version
openjdk version "11.0.23" 2024-04-16 LTS
OpenJDK Runtime Environment (Red_Hat-11.0.23.0.9-2.el7_9) (build 11.0.23+9-LTS)
OpenJDK 64-Bit Server VM (Red_Hat-11.0.23.0.9-2.el7_9) (build 11.0.23+9-LTS, mixed mode, sharing)


STEP 7: CREATE  A DIRECTORY FOR KAFKA

[root@server1 ~]# mkdir -p /opt/kafka/
[root@server1 ~]# chmod -R 777 /opt/kafka/

STEP 8 : GO TO ABOVE DIRECTORY AND INSTALL KAFKA
[root@server1 ~]#cd /opt/kafka/
[root@server1 kafka]# pwd
/opt/kafka
[root@server1 kafka]# wget https://archive.apache.org/dist/kafka/3.6.1/kafka_2.12-3.6.1.tgz

### Untar the file using:
[root@server1 kafka]#tar -xzf kafka_2.12-3.6.1.tgz
cd to kafka software directory
[root@server1 kafka_2.12-3.6.1]# ls
bin  config  libs  LICENSE  licenses  NOTICE  site-docs
[root@server1 kafka_2.12-3.6.1]# pwd
/opt/kafka/kafka_2.12-3.6.1

STEP 9 : CREATE A DATA DIRECTORY FOR ZOOKEEPER AND CREATE A FILE "myid" LIKE BELOW

[root@server1 ~]# mkdir -p /data/zookeeper
[root@server1 ~]# chmod -R 777 /data/zookeeper
[root@server1 ~]#
[root@server1 ~]# cd /data/zookeeper/
[root@server1 zookeeper]# ll
total 0
[root@server1 zookeeper]# vi myid
[root@server1 zookeeper]# cat myid
1

STEP 10 : CONFIGURATION CHANGES IN zookeeper.properties AND server.properties 

[root@server1 config]# vi zookeeper.properties
.................
dataDir=/data/zookeeper
clientPort=2181
tickTime=2000
syncLimit=2
autopurge.purgeInterval=1
maxClientCnxns=0
initLimit=5
autopurge.snapRetainCount=10
server.1=server1.kafka.com:2888:3888
........................

[root@server1 config]# vi server.properties
..............
broker.id=0
listeners=PLAINTEXT://:9092
advertised.listeners=PLAINTEXT://server1.kafka.com:9092
zookeeper.connect=192.168.0.101:2181
....................

STEP 11 : RUN ZOOKEEPER AND KAFKA MANUALLY

[root@server1 kafka_2.12-3.6.1]# ./bin/zookeeper-server-start.sh -daemon config/zookeeper.properties
[root@server1 kafka_2.12-3.6.1]#
[root@server1 kafka_2.12-3.6.1]# ps -ef | grep zookeeper
netstat -nlp | grep 2181

[root@server1 kafka_2.12-3.6.1]# ./bin/kafka-server-start.sh -daemon  config/server.properties
[root@server1 kafka_2.12-3.6.1]#
[root@server1 kafka_2.12-3.6.1]# ps -ef | grep kafka



[root@server1 kafka_2.12-3.6.1]# ./bin/kafka-topics.sh --bootstrap-server server1.kafka.com:9092 --create --topic TP1 --partitions 2 --replication-factor 1

Created topic TP1.

STEP 12 : CREATE A DIRECTORY FOR PROMETHEUS AND GIVE FULL PERMISSIONS

[root@server1 ~]# mkdir /prometheus

##########  DOWNLOAD JMX-JAVAAGENT-JAR FILE AND KAFKA.YML FILE FROM GITHUB ############
JMX

Java Management Extensions (JMX) is a technology that provides the tools for providing monitoring within applications built on JVM. 
Since Kafka is written in Java, it extensively uses JMX technology to expose its internal metrics over the JMX platform.
JMX Exporter is a collector that can run as a part of an existing Java application (such as Kafka) and expose its JMX metrics over an HTTP endpoint, 
which can be consumed by any system such as Prometheus


JAR LINK: https://github.com/prometheus/jmx_exporter/releases

[root@server1 ~]# cd /prometheus/

GO TO ROOT DIRECTORY AND GIVE FULL PERMISSIONS TO PROMETHEUS DIRECTORY

[root@server1 ~]# chmod -R 777 /prometheus/

[root@server1 prometheus]# wget https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/0.19.0/jmx_prometheus_javaagent-0.19.0.jar

  [root@server1 prometheus]# wget https://github.com/prometheus/jmx_exporter/blob/main/example_configs/kafka-2_0_0.yml
 
 # Create a file kafka-2_0_0.jmx.yml  and copy all the  parameters into it.
 
[root@server1 prometheus]# vi kafka-2_0_0.jmx.yml

[root@server1 prometheus]# ls
jmx_prometheus_javaagent-0.19.0.jar  kafka-2_0_0.jmx.yml  kafka-2_0_0.yml


STEP 13 : COPY THE JAR FILE TO "kafka/libs" DIRECTORY AND YAML FILE TO "kafka/conf" DIRECTORY LIKE BELOW

[root@server1 prometheus]# cp jmx_prometheus_javaagent-0.19.0.jar /opt/kafka/kafka_2.12-3.6.1/libs

[root@server1 prometheus]# cp kafka-2_0_0.jmx.yml /opt/kafka/kafka_2.12-3.6.1/config/

STEP 14 : CREATE A ZOOKEEPER SERVICE AND KAFKA SERVICE LIKE BELOW

[root@server1 ~]# vi /etc/systemd/system/kafka.service
[root@server1 ~]# cat /etc/systemd/system/kafka.service

[unit]
Description=Apache Kafka
Wants=network.target zookeeper.service
After=network.target zookeeper.service

[Service]
Type=simple
User=root
Group=root
ExecStart=/opt/kafka/kafka_2.12-3.6.1/bin/kafka-server-start.sh /opt/kafka/kafka_2.12-3.6.1/config/server.properties
Environment="KAFKA_OPTS=-javaagent:/opt/kafka/kafka_2.12-3.6.1/libs/jmx_prometheus_javaagent-0.19.0.jar=7070:/opt/kafka/kafka_2.12-3.6.1/config/kafka-2_0_0.jmx.yml" 
ExecStop=/opt/kafka/kafka_2.12-3.6.1/bin/kafka-server-stop.sh
Restart=on-failure

[Install]
WantedBy=multi-user.target


[root@server1 ~]# vi /etc/systemd/system/zookeeper.service
[root@server1 ~]# cat  /etc/systemd/system/zookeeper.service
[unit]
Description=Apache Zookeeper
Requires=network.target
After=network.target

[Service]
Type=simple
User=root
Group=root
ExecStart=/opt/kafka/kafka_2.12-3.6.1/bin/zookeeper-server-start.sh /opt/kafka/kafka_2.12-3.6.1/config/zookeeper.properties
ExecStop=/opt/kafka/kafka_2.12-3.6.1/bin/zookeeper-server-stop.sh
Restart=on-failure

[Install]
WantedBy=multi-user.target

STEP 15 : RUN BELOW COMMANDS

 systemctl daemon-reload
 systemctl start zookeeper
 systemctl enable zookeeper
  systemctl status zookeeper

 systemctl daemon-reload
 systemctl start kafka
 systemctl enable kafka
  systemctl status kafka



STEP 17: RUN BELOW COMMANDS TO MAKE THE CHANGES WORK(if any)

[root@server1 ~]# systemctl daemon-reload
[root@server1 ~]# systemctl restart kafka
[root@server1 ~]#   systemctl status kafka

STEP 18 : KAFKA METRICS

[root@server1 ~]# curl 192.168.0.101:7070
[.....
...
.... u can see all the kafka metrics here
....]

                                     PROMETHEUS

STEP 19: GO TO PROMETHEUS DIRECTORY AND INSTALL "prometheus tar file" LIKE BELOW

[root@server1 ~]# cd /prometheus/
[root@server1 prometheus]# ls
jmx_prometheus_javaagent-0.19.0.jar  kafka-2_0_0.jmx.yml  kafka-2_0_0.yml
[root@server1 prometheus]#  wget https://github.com/prometheus/prometheus/releases/download/v2.40.7/prometheus-2.40.7.linux-amd64.tar.gz

[root@server1 prometheus]# tar -xzf prometheus-2.40.7.linux-amd64.tar.gz
[root@server1 prometheus]# cd prometheus-2.40.7.linux-amd64/
[root@server1 prometheus-2.40.7.linux-amd64]# ls
console_libraries  consoles  LICENSE  NOTICE  prometheus  prometheus.yml  promtool

STEP 20 : ADD KAFKA JOB IN prometheus.yml LIKE BELOW and also change ip address in static_config

[root@server1 prometheus-2.40.7.linux-amd64]# vi prometheus.yml

scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
      - targets: ["192.168.0.101:9090"]

  - job_name: 'kafka'
    static_configs:
      - targets: ['192.168.0.101:7070']

STEP 21 : START PROMETHEUS AND LEAVE THAT TERMINAL

[root@server1 prometheus-2.40.7.linux-amd64]# ./prometheus
.......................
u see a msg saying
.................. level=info msg="Server is ready to receive web requests."


[after executing above line leave this terminal RUNNING.Don't stop it]

STEP 22: GO TO URL AND TYPE

   http://192.168.0.101:9090

[u can see prometheus web page and type "up" in search prompt]

 GO TO THE STATUS BAR AND CLICK ON status drop down and CLICK ON TARGETS

[u will see services up and running]


                                    GRAFANA

steps to Install Grafana on CentOS 7 / RHEL 7 Linux system

LINK TO DOWNLOAD GRAFANA : https://grafana.com/grafana/download

STEP 1:Add Grafana RPM repository to your system ..create "grafana.repo" file and add the below lines..

 [root@server1 ~]#vim /etc/yum.repos.d/grafana.repo 
.................................................
[grafana]
name=grafana
baseurl=https://packages.grafana.com/oss/rpm
repo_gpgcheck=1
enabled=1
gpgcheck=1
gpgkey=https://packages.grafana.com/gpg.key
sslverify=1
sslcacert=/etc/pki/tls/certs/ca-bundle.crt
...................................................

STEP 2: install grafana from root directory

    #  yum install grafana -y
    # rpm -qi grafana    --- TO CHECK THE info

   
   # yum install fontconfig -y
   # yum install freetype* -y
   # yum install urw-fonts -y

STEP 3: start the grafana service

   # systemctl status grafana-server     --IT SHOWS IT IS INACTIVE
   # systemctl start grafana-server

[root@server1 ~]# systemctl enable grafana-server.service
Created symlink from /etc/systemd/system/multi-user.target.wants/grafana-server. service to /usr/lib/systemd/system/grafana-server.service.

[root@server1 ~]# sudo systemctl restart grafana-server
                   # systemctl status grafana-server


STEP 4: access grafana ..go to the url below
   http://[serverip|hostname]:3000
   http://192.168.0.101:3000

STEP 5: login
   the default login details are 
   username : admin
   password : admin

In the next step it will ask you to reset your password..give a new password and save it.

STEP 6: ADD a dataservice

   click on prometheus

STEP 7: we will have to tell Grafana where to find Prometheus server.

  name : prometheus-1 

  URL : http://192.168.0.101:9090   [ provide the respective prometheus url]
    
  click on Save&Test

STEP 8: IMPORT A DASHBOARD FROM GRAFANA WEBSITE 

Go to dashboards ,click on new ,click on import. On the import page, issue the id 721 then click on adjacent “Load” button.
 
[ Here we are going to use an already made dashboard created by Robust Perception. Its id is 721]
Kafka metrics id : 11962
step 9: on the next page, you have to give a name for eg: kafka and select the datasource "prometheus-1" and click on Import.

IF YOU WANT TO CREATE YOUR OWN DASHBOARD , 

CLICK ON DASHBOARDS >> CLICK ON NEW >> NEW DASHBOARD >> ADD VISUALIZATION >> SELECT PROMETHEUS DATA SOURCE >> SELECT A METRIC FROM DROPDOWN >> RUN QURIES >>
 CHANGE PANEL TITLE >> CLICK ON APPLY >> CLICK ON "SETTINGS SYMBOL" TO SAVE DASHBOARD BY GIVING IT A NAME >> SAVE DASHBOARD

Now you can see your kafka metrics displayed on Grafana.






